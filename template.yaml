AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  my-first-serverless-app

  Sample SAM Template for my-first-serverless-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Parameters:
  TableName:
    Type: String
    Description: The DynamoDB table for storing URLs information.
    Default: 'UrlsTable'

  RegionName:
    Type: String
    Description: Default region for deployment.
    Default: 'us-east-1'

  DomainName:
    Type: String
    Description: Domain name.
    Default: 'example.com'

  CertificateARN:
    Description: Certificate ARN for your domain.
    Type: String
    Default: 'cert-arn-in-us-east-1'

  HostedZoneName:
    Description: Hosted zone name
    Type: String
    Default: 'example.com.'

Resources:
  UrlsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'WWW-Authenticate'"
              Access-Control-Allow-Origin: "'*'"
              WWW-Authenticate: >-
                'Bearer realm="admin"'

  FrontEnd:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./frontend/dist/lambda/
      Handler: server.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref RegionName
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        RootEndPoint:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /
            Method: any
            Auth:
              Authorizer: NONE

  BackendApi:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./backend/dist/lambda/
      Handler: server.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          AWS_REGION_NAME: !Ref RegionName
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies: AmazonDynamoDBFullAccess
      Events:
        UnauthorizedRoutes:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /{proxy+}
            Method: any
            Auth:
              Authorizer: NONE

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ApiUserPool
      # LambdaConfig:
      #   PreSignUp: !GetAtt PreSignupFunction.Arn
      # 
      Policies:
        PasswordPolicy:
          MinimumLength: 6

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: ApiUserPoolClient
      GenerateSecret: no

  # PreSignupFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: index.handler
  #     Runtime: nodejs12.x
  #     InlineCode: |
  #       exports.handler = async event => {
  #         event.response = { autoConfirmUser: true };
  #         return event;
  #       };

  # LambdaCognitoUserPoolExecutionPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !GetAtt PreSignupFunction.Arn
  #     Principal: cognito-idp.amazonaws.com
  #     SourceArn: !Sub 'arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}'

  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateARN
      DomainName: !Ref DomainName

  APIBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref APIDomainName
      RestApiId: !Ref ServerlessApi
      Stage: Prod


  APIDomain:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZoneName
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            DNSName: !GetAtt APIDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for CloudFront aliases

# Outputs:
#   ProdDataEndpoint:
#     Description: 'API Prod stage endpoint'
#     Value: !Sub 'https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
